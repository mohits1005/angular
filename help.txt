1. root > src index.html
2. root > src > app app.component.ts
3. root > src > app app.component.html
4. Bind [(ngModel)] to name (2 way binding)
5. Print objects {{}}
6. Adding FormsModule in app.modules.ts
7. component? 2 way data binding? directives(like ngModel)?
8. TypeScript -> super script of Javascript(ex. types, classes)
9. Install bootstrap with npm
10. Add bootstrap reference in angular.json > styles > "node_modules/bootstrap/dist/css/bootstrap.min.css"
11. index.html is served by the server.
12. app.component.ts > selector > app-root
13. main.ts is the first code that gets executed.
14. bootstrap is loaded in main.ts, app.module.ts assigns bootstrap to appComponent
15. components are like div class container
16. create component, register it in module, using custom component
17. create component using cli, ng g c servers
18. component > template, style, selector
19. Data binding (Communcication between TS(Business Logic) and HTML(Template))
20. String Interpolation ({{ data }})
21. Property Binding ([property]="data")
22. Event Binding ((event)="expression")
23. Combination of both - Two way Data Binding ([(ngModel)]="data")
24. Directives - instructions in dom (set like attributes) > built in/custom
25. *ngIf directive
26. ng-template #noServer - create a marker for the template
27. [ngStyle] (It works like property binding)
28. [ngClass] (It works like property binding) class will be added based on a condition 
29. *ngFor="let server of servers"
30. Use index in ngFor, let i = index
31. Developer tools > main.bundle.js > click on line > open .ts file > debug
32. Developer tools > webpack > open .ts file > debug
33. Third party debug tool - augury (Add chrome extension)
34. Put ngModel on input(testInput), to access in component.ts using this.testInput
35. Property & Event Binding can be done on components as well
36. Pass data from component(up) to other component(down) (appcomponent to server): Add @Input() (import { Input } from '@angular/core';) in front of variable to make it accessible to other component
37. @Input('srvElement') to set alias to property
38. @Output() Pass data from component(down) to other component(up) (cockpit to appcomponent): create custom event listener in appComponent, in cockpit create eventEmitter and emit an object.Here we will emit our own events.
39. Component Communcication:
a) Add @input() to make your property(variable) bindable from outside
b) @output that allows parent component to listen to your own events which we create using emitter
40. To use application wide css, set encapsulation to none
41. Can add local reference to any html tag using #name
42. Use reference only in template not in ts code(Important)
