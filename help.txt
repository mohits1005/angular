1. root > src index.html
2. root > src > app app.component.ts
3. root > src > app app.component.html
4. Bind [(ngModel)] to name (2 way binding)
5. Print objects {{}}
6. Adding FormsModule in app.modules.ts
7. component? 2 way data binding? directives(like ngModel)?
8. TypeScript -> super script of Javascript(ex. types, classes)
9. Install bootstrap with npm
10. Add bootstrap reference in angular.json > styles > "../node_modules/bootstrap/dist/css/bootstrap.min.css"
11. index.html is served by the server.
12. app.component.ts > selector > app-root
13. main.ts is the first code that gets executed.
14. bootstrap is loaded in main.ts, app.module.ts assigns bootstrap to appComponent
15. components are like div class container
16. create component, register it in module, using custom component
17. create component using cli, ng g c servers
18. component > template, style, selector
19. Data binding (Communcication between TS(Business Logic) and HTML(Template))
20. String Interpolation ({{ data }})
21. Property Binding ([property]="data")
22. Event Binding ((event)="expression")
23. Combination of both - Two way Data Binding ([(ngModel)]="data")
24. Directives - instructions in dom (set like attributes) > built in/custom
25. *ngIf directive
26. ng-template #noServer - create a marker for the template
27. [ngStyle] (It works like property binding)
28. [ngClass] (It works like property binding) class will be added based on a condition 
29. *ngFor="let server of servers"
30. Use index in ngFor, let i = index
31. 